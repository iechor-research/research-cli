name: Build Native Wrapper

on:
  push:
    tags:
      - 'v*-native'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 0.2.7)'
        required: true
        default: '0.2.7'

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: macOS Intel
            os: macos-latest
            target: x86_64-apple-darwin
            binary: research-cli
            archive: research-cli-darwin-x64
          - name: macOS Apple Silicon
            os: macos-latest
            target: aarch64-apple-darwin
            binary: research-cli
            archive: research-cli-darwin-arm64
          - name: Windows x64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            binary: research-cli.exe
            archive: research-cli-win32-x64.exe
          - name: Linux x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            binary: research-cli
            archive: research-cli-linux-x64
          - name: Linux ARM64
            os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            binary: research-cli
            archive: research-cli-linux-arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: npm run build

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install Rust target
        run: rustup target add ${{ matrix.platform.target }}

      - name: Install Linux dependencies
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential musl-tools
          if [[ "${{ matrix.platform.target }}" == "aarch64-unknown-linux-musl" ]]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          fi

      - name: Configure cross-compilation for Linux ARM64
        if: matrix.platform.target == 'aarch64-unknown-linux-musl'
        run: |
          mkdir -p src-tauri/.cargo
          cat > src-tauri/.cargo/config.toml << 'EOF'
          [target.aarch64-unknown-linux-musl]
          linker = "aarch64-linux-gnu-gcc"
          EOF

      - name: Build binary
        working-directory: src-tauri
        run: cargo build --release --target ${{ matrix.platform.target }}

      - name: Package binary
        shell: bash
        run: |
          mkdir -p dist-native
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            cp "src-tauri/target/${{ matrix.platform.target }}/release/${{ matrix.platform.binary }}" "dist-native/${{ matrix.platform.archive }}"
          else
            cp "src-tauri/target/${{ matrix.platform.target }}/release/${{ matrix.platform.binary }}" "dist-native/${{ matrix.platform.archive }}"
            chmod +x "dist-native/${{ matrix.platform.archive }}"
          fi

      - name: Generate build info
        shell: bash
        run: |
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%S.000Z)
            FILE_SIZE=$(powershell -Command "(Get-Item 'dist-native/${{ matrix.platform.archive }}').Length")
            SIZE_MB=$(echo "scale=2; $FILE_SIZE / 1024 / 1024" | bc -l 2>/dev/null || echo "N/A")
            SIZE_DISPLAY="${SIZE_MB}MB"
          else
            BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%S.000Z)
            SIZE_DISPLAY=$(du -h "dist-native/${{ matrix.platform.archive }}" | cut -f1)
          fi
          
          cat > "dist-native/${{ matrix.platform.archive }}.json" << EOF
          {
            "version": "${{ github.event.inputs.version || '0.2.6' }}",
            "buildTime": "$BUILD_TIME",
            "platform": "${{ matrix.platform.name }}",
            "target": "${{ matrix.platform.target }}",
            "binaryName": "${{ matrix.platform.archive }}",
            "size": "$SIZE_DISPLAY",
            "description": "Native wrapper for Research CLI - ${{ matrix.platform.name }}"
          }
          EOF

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.archive }}
          path: |
            dist-native/${{ matrix.platform.archive }}
            dist-native/${{ matrix.platform.archive }}.json
          retention-days: 1
          if-no-files-found: error

  create-node-package:
    name: Create Node.js Package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build project
        run: npm run build
        
      - name: Create package archive
        run: |
          mkdir -p dist-package
          cp -r packages dist-package/
          cp package.json dist-package/
          cp package-lock.json dist-package/
          cd dist-package
          tar -czf ../research-cli-node.tar.gz .
          cd ..
          
      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-package
          path: research-cli-node.tar.gz

  create-release:
    name: Create Release
    needs: [build-macos-intel, build-macos-arm, build-windows, build-linux-x64, build-linux-arm64, create-node-package]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && endsWith(github.ref, '-native')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create dist-native directory
        run: mkdir -p dist-native

      - name: Download artifacts manually
        run: |
          echo "Downloading artifacts manually..."
          mkdir -p dist-native-temp
          
          # Function to download individual artifact
          download_artifact() {
            local artifact_name=$1
            echo "Downloading $artifact_name..."
            
            # Get artifact info
            artifact_info=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/iechor-research/research-cli/actions/runs/${{ github.run_id }}/artifacts" | \
              jq -r --arg name "$artifact_name" '.artifacts[] | select(.name == $name)')
            
            if [ -z "$artifact_info" ]; then
              echo "Artifact $artifact_name not found"
              return 1
            fi
            
            # Get download URL
            artifact_url=$(echo "$artifact_info" | jq -r '.archive_download_url')
            
            # Download artifact
            curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "$artifact_url" -o "dist-native-temp/${artifact_name}.zip"
            
            # Extract artifact
            cd dist-native-temp
            unzip -q "${artifact_name}.zip"
            rm "${artifact_name}.zip"
            cd ..
            
            return 0
          }
          
          # Download each artifact
          artifacts=(
            "research-cli-darwin-x64"
            "research-cli-darwin-arm64"
            "research-cli-win32-x64.exe"
            "research-cli-linux-x64"
            "research-cli-linux-arm64"
            "node-package"
          )
          
          for artifact in "${artifacts[@]}"; do
            download_artifact "$artifact" || echo "Failed to download $artifact"
          done
          
          # Move all files to dist-native
          mv dist-native-temp/* dist-native/ || true
          rmdir dist-native-temp || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Organize artifacts
        run: |
          echo "=== Initial directory structure ==="
          find dist-native -type f | sort
          echo ""
          
          # 移动所有文件到 dist-native 根目录
          echo "=== Moving files to root directory ==="
          
          # 处理每个特定的文件
          # Windows
          if [ -f "dist-native/research-cli-win32-x64.exe/research-cli-win32-x64.exe" ]; then
            echo "Moving Windows binary..."
            mv -f "dist-native/research-cli-win32-x64.exe/research-cli-win32-x64.exe" "dist-native/" || true
          fi
          
          # Linux x64
          if [ -f "dist-native/research-cli-linux-x64/research-cli-linux-x64" ]; then
            echo "Moving Linux x64 binary..."
            mv -f "dist-native/research-cli-linux-x64/research-cli-linux-x64" "dist-native/" || true
          fi
          
          # Linux ARM64
          if [ -f "dist-native/research-cli-linux-arm64/research-cli-linux-arm64" ]; then
            echo "Moving Linux ARM64 binary..."
            mv -f "dist-native/research-cli-linux-arm64/research-cli-linux-arm64" "dist-native/" || true
          fi
          
          # Node.js package
          if [ -f "dist-native/node-package/research-cli-node.tar.gz" ]; then
            echo "Moving Node.js package..."
            mv -f "dist-native/node-package/research-cli-node.tar.gz" "dist-native/" || true
          elif [ -f "dist-native/research-cli-node.tar.gz" ]; then
            echo "Node.js package already in place"
          fi
          
          # 移动JSON文件
          find dist-native -mindepth 2 -name "*.json" -exec mv -f {} dist-native/ \; || true
          
          # 清理空目录
          find dist-native -type d -empty -delete || true
          
          echo ""
          echo "=== Files in dist-native after organization ==="
          ls -la dist-native/
          echo ""
          
          # 确保我们有所有必需的文件
          echo "=== Checking for required files ==="
          missing_files=()
          required_files=(
            "research-cli-darwin-x64"
            "research-cli-darwin-arm64"
            "research-cli-win32-x64.exe"
            "research-cli-linux-x64"
            "research-cli-linux-arm64"
            "research-cli-node.tar.gz"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -f "dist-native/$file" ]; then
              echo "❌ Missing required file: $file"
              missing_files+=("$file")
            else
              echo "✅ Found: $file"
              # 确保文件可执行
              chmod +x "dist-native/$file" || true
            fi
          done
          
          if [ ${#missing_files[@]} -gt 0 ]; then
            echo ""
            echo "=== ERROR: Missing files ==="
            printf '%s\n' "${missing_files[@]}"
            echo ""
            echo "=== Available files ==="
            find dist-native -type f -name "*research-cli*" | sort
            echo ""
            echo "=== All files in dist-native ==="
            find dist-native -type f | sort
            exit 1
          fi
          
          echo ""
          echo "=== All required files found! ==="

      - name: Create install script
        run: |
          # Copy the complete installer script
          cp dist-native/install-complete.sh dist-native/install-complete.sh || echo "install-complete.sh not found"
          
          cat > dist-native/install.sh << 'EOF'
          #!/bin/bash
          
          # Research CLI Native Wrapper - One-line Installer
          # Usage: curl -sSL https://github.com/iechor-research/research-cli/releases/download/v0.2.7-native/install.sh | bash
          
          set -e
          
          # Colors for output
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          BLUE='\033[0;34m'
          NC='\033[0m' # No Color
          
          # Detect platform
          detect_platform() {
              local os=$(uname -s)
              local arch=$(uname -m)
              
              case "$os" in
                  Darwin)
                      case "$arch" in
                          x86_64) echo "research-cli-darwin-x64" ;;
                          arm64|aarch64) echo "research-cli-darwin-arm64" ;;
                          *) echo "unsupported" ;;
                      esac
                      ;;
                  Linux)
                      case "$arch" in
                          x86_64) echo "research-cli-linux-x64" ;;
                          aarch64|arm64) echo "research-cli-linux-arm64" ;;
                          *) echo "unsupported" ;;
                      esac
                      ;;
                  CYGWIN*|MINGW*|MSYS*)
                      case "$arch" in
                          x86_64) echo "research-cli-win32-x64.exe" ;;
                          *) echo "unsupported" ;;
                      esac
                      ;;
                  *)
                      echo "unsupported"
                      ;;
              esac
          }
          
          # Main installation function
          install_research_cli() {
              local platform=$(detect_platform)
              
              if [ "$platform" = "unsupported" ]; then
                  echo -e "${RED}Unsupported platform: $(uname -s) $(uname -m)${NC}"
                  echo "Supported platforms:"
                  echo "  - macOS (Intel & Apple Silicon)"
                  echo "  - Linux (x64 & ARM64)"
                  echo "  - Windows (x64)"
                  exit 1
              fi
              
              echo -e "${BLUE}Installing Research CLI Native Wrapper...${NC}"
              echo -e "${YELLOW}Platform: $platform${NC}"
              
              # Create installation directory
              local install_dir="$HOME/.local/bin"
              mkdir -p "$install_dir"
              
              # Download URL
              local version="v0.2.7-native"
              local download_url="https://github.com/iechor-research/research-cli/releases/download/$version/$platform"
              
              echo -e "${BLUE}Downloading from: $download_url${NC}"
              
              # Download the binary
              if command -v curl >/dev/null 2>&1; then
                  curl -sSL "$download_url" -o "$install_dir/research-cli"
              elif command -v wget >/dev/null 2>&1; then
                  wget -q "$download_url" -O "$install_dir/research-cli"
              else
                  echo -e "${RED}Neither curl nor wget is available${NC}"
                  exit 1
              fi
              
              # Make executable
              chmod +x "$install_dir/research-cli"
              
              # Add to PATH if not already there
              local shell_config=""
              if [ -n "$BASH_VERSION" ]; then
                  shell_config="$HOME/.bashrc"
              elif [ -n "$ZSH_VERSION" ]; then
                  shell_config="$HOME/.zshrc"
              else
                  shell_config="$HOME/.profile"
              fi
              
              if [[ ":$PATH:" != *":$install_dir:"* ]]; then
                  echo "export PATH=\"$install_dir:\$PATH\"" >> "$shell_config"
                  echo -e "${YELLOW}Added $install_dir to PATH in $shell_config${NC}"
                  echo -e "${YELLOW}Please restart your terminal or run: source $shell_config${NC}"
              fi
              
              echo -e "${GREEN}Installation completed successfully!${NC}"
              echo -e "${GREEN}You can now use: research-cli${NC}"
              echo ""
              echo -e "${BLUE}Quick start:${NC}"
              echo "  research-cli --help"
              echo "  research-cli config show"
              echo "  research-cli models list"
              echo ""
              echo -e "${BLUE}For more information, visit:${NC}"
              echo "  https://github.com/iechor-research/research-cli"
          }
          
          # Run installation
          install_research_cli
          EOF
          
          chmod +x dist-native/install.sh

      - name: Generate release notes
        run: |
          cat > dist-native/RELEASE_NOTES.md << 'EOF'
          # Research CLI Native Wrapper v0.2.7
          
          **Cross-platform native wrapper for Research CLI**
          
          ## Features
          
          - **Ultra-lightweight**: ~500KB per binary (99% smaller than previous versions)
          - **Zero dependencies**: No Node.js runtime required
          - **Native performance**: Pure Rust wrapper with direct CLI execution
          - **Cross-platform**: Support for 5 major platforms
          - **One-line install**: Simple installation script
          - **Linux compatibility**: Uses musl static linking for better compatibility
          
          ## Supported Platforms
          
          | Platform | Architecture | File | Size |
          |----------|-------------|------|------|
          | macOS | Intel x64 | `research-cli-darwin-x64` | ~420KB |
          | macOS | Apple Silicon | `research-cli-darwin-arm64` | ~430KB |
          | Windows | x64 | `research-cli-win32-x64.exe` | ~500KB |
          | Linux | x64 | `research-cli-linux-x64` | ~450KB |
          | Linux | ARM64 | `research-cli-linux-arm64` | ~480KB |
          
          ## Quick Install
          
          ```bash
          # One-line install (recommended)
          curl -sSL https://github.com/iechor-research/research-cli/releases/download/v0.2.7-native/install.sh | bash
          
          # Manual install
          # 1. Download the binary for your platform
          # 2. Make it executable: chmod +x research-cli-*
          # 3. Move to PATH: mv research-cli-* ~/.local/bin/research-cli
          ```
          
          ## Usage
          
          ```bash
          # Show help
          research-cli --help
          
          # Show configuration
          research-cli config show
          
          # List available models
          research-cli models list
          
          # Start research session
          research-cli
          ```
          
          ## Technical Details
          
          - **Runtime**: Pure Rust wrapper (no Node.js required)
          - **Execution**: Direct process spawning with inherited I/O
          - **Compatibility**: Full Research CLI feature support
          - **Performance**: Native speed with minimal overhead
          
          ## Requirements
          
          - No runtime dependencies
          - Node.js installation (for Research CLI backend)
          - Compatible with all Research CLI features
          
          ## Troubleshooting
          
          If you encounter issues:
          
          1. **Permission denied**: Run `chmod +x research-cli-*`
          2. **Command not found**: Add binary to PATH or use full path
          3. **Node.js missing**: Install Node.js for Research CLI backend
          4. **Platform not supported**: Check supported platforms above
          
          ## Links
          
          - **Repository**: https://github.com/iechor-research/research-cli
          - **Documentation**: https://github.com/iechor-research/research-cli/docs
          - **Issues**: https://github.com/iechor-research/research-cli/issues
          
          ---
          
          **Built with ❤️ using GitHub Actions**
          EOF

      - name: Create GitHub Release
        run: |
          echo "Creating GitHub Release..."
          
          # Create release using GitHub CLI
          gh release create "${{ github.ref_name }}" \
            --title "Research CLI Native Wrapper ${{ github.ref_name }}" \
            --notes-file dist-native/RELEASE_NOTES.md \
            --verify-tag \
            dist-native/research-cli-* \
            dist-native/install.sh \
            dist-native/install-complete.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Native wrapper built successfully for all platforms!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          for file in dist-native/research-cli-*; do
            if [ -f "$file" ]; then
              size=$(du -h "$file" | cut -f1)
              name=$(basename "$file")
              echo "- **$name**: $size" >> $GITHUB_STEP_SUMMARY
            fi
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Installation:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo 'curl -sSL https://github.com/iechor-research/research-cli/releases/download/${{ github.ref_name }}/install.sh | bash' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release URL**: https://github.com/iechor-research/research-cli/releases/tag/${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY 